package Test;

import java.io.PrintStream;

import Communication.Communication;
import motorController.*;
import I_O_s.I_O_s;
import ch.ntb.inf.deep.runtime.mpc555.driver.SCI;
//import ch.ntb.inf.deep.runtime.mpc555.driver.SCI;
//import java.io.PrintStream;
import ch.ntb.inf.deep.runtime.ppc32.Task;
import definitions.PinMap;
import definitions.RobotConstants;

public class TestMotorController extends Task{

	private Communication com;
	private I_O_s ios = null;
	private MotorController motorControllerLeft =null;
	private int counter=0;
	private double receiveMsg = 0;


	
	public TestMotorController() throws Exception 
	{
		motorControllerLeft = new MotorController(RobotConstants.USE_TPUA, PinMap.ROPE_FRONT_PWM_PLUS_TPU_PIN, PinMap.ROPE_FRONT_PWM_MINUS_TPU_PIN, PinMap.ROPE_FRONT_ENC_A_TPU_PIN);
		period = 500;
		com = new Communication();
		ios = new I_O_s();
		ios.setLRDisableSleep(false);
		ios.allLedOff();
		ios.setMagnet(false);
		ios.setOptOnOff(false);
		Task.install(this);
	}
	
	public void action(){
		
		com.sendData((int)motorControllerLeft.encoderPositionInMM);
		receiveMsg = com.getData();
		if(counter>10 && receiveMsg != 99)
		{
			ios.setLRDisableSleep(false);
			ios.setFDisableSleep(true);
			motorControllerLeft.setDesiredPositionInMMandTimeInSec(receiveMsg, 4);
			counter = 0;
		}
		counter++;
	}
	
	
	static{
		SCI sci1 = SCI.getInstance(SCI.pSCI1);
		sci1.start(19200, SCI.NO_PARITY, (short)8);
		System.out = new PrintStream(sci1.out);
		System.out.print("TestMotorController");
		try {
			new TestMotorController();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}