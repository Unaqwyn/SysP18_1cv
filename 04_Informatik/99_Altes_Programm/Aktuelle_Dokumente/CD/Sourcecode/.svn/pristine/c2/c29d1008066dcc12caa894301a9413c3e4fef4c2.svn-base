package Test;

import java.io.PrintStream;

import Communication.Communication;
import motorController.*;
import I_O_s.I_O_s;
import ch.ntb.inf.deep.runtime.mpc555.driver.SCI;
//import ch.ntb.inf.deep.runtime.mpc555.driver.SCI;
//import java.io.PrintStream;
import ch.ntb.inf.deep.runtime.ppc32.Task;
import definitions.PinMap;
import definitions.RobotConstants;

public class TestMotorController extends Task{

	private Communication com;
	private I_O_s ios = null;
	private MotorController motorControllerLeft =null;
	private MotorController motorControllerRight =null;
	private MotorController motorControllerFront =null;
	private double receiveMsg = 0;
	private int counter = 80;

	
	public TestMotorController() throws Exception 
	{
		motorControllerLeft = new MotorController(RobotConstants.USE_TPUA, PinMap.ROPE_LEFT_PWM_PLUS_TPU_PIN, PinMap.ROPE_LEFT_PWM_MINUS_TPU_PIN, PinMap.ROPE_LEFT_ENC_A_TPU_PIN);
		motorControllerRight = new MotorController(RobotConstants.USE_TPUA, PinMap.ROPE_RIGHT_PWM_PLUS_TPU_PIN, PinMap.ROPE_RIGHT_PWM_MINUS_TPU_PIN, PinMap.ROPE_FRONT_ENC_A_TPU_PIN);
//		motorControllerFront = new MotorController(RobotConstants.USE_TPUA, PinMap.ROPE_FRONT_PWM_PLUS_TPU_PIN, PinMap.ROPE_FRONT_PWM_MINUS_TPU_PIN, PinMap.ROPE_FRONT_ENC_A_TPU_PIN);
		period = 500;
		com = new Communication();
		ios = new I_O_s();
		ios.setLRDisableSleep(true);
		ios.setFDisableSleep(false);
		ios.allLedOff();
		ios.setMagnet(false );
		ios.setOptOnOff(false);
		Task.install(this);
	}
	
	public void action(){
		
		com.sendData((int)motorControllerLeft.encoderPositionInMM);
		com.sendData((int)motorControllerRight.encoderPositionInMM);
//		com.sendData((int)motorControllerFront.encoderPositionInMM);
		receiveMsg = com.getData();
//		System.out.println(receiveMsg);
		if(receiveMsg != 99)
		{
//			System.out.println("test");
			//ios.setLRDisableSleep(true);
			//motorController.setDesiredPositionInMMandTimeInSec(receiveMsg, 5.0);
			//motorController.setDesiredSpeed(receiveMsg);
			motorControllerLeft.setDesiredPosition(receiveMsg);
			motorControllerRight.setDesiredPosition(receiveMsg);
//			motorControllerFront.setDesiredPosition(receiveMsg);
			//motorController.motor.setSpeed(receiveMsg);
//			counter = 0;
		}
			
//		if(!ios.getStartSwitch())
//		{
//			ios.setLedSearch(true);
////			motorControllerLeft.setDesiredPosition(200);
////			motorControllerRight.setDesiredPosition(200);
//			motorControllerFront.setDesiredPosition(200);
//		}
//		else
//		{
//			ios.setLedSearch(false);
////			motorControllerLeft.setDesiredPosition(0);
////			motorControllerRight.setDesiredPosition(0);
//			motorControllerFront.setDesiredPosition(0);
//		}
//		
		
		
//		if(!ios.getButtonMotorRight()){
//			motorControllerLeft.motor.setQuarterSpeedReverse();
//			motorControllerRight.motor.setQuarterSpeedReverse();
//			ios.setLedDock(!ios.getButtonMotorMiddle());
//		}
//		counter++;
	}
	
	
	static{
		SCI sci1 = SCI.getInstance(SCI.pSCI1);
		sci1.start(19200, SCI.NO_PARITY, (short)8);
		System.out = new PrintStream(sci1.out);
		System.out.print("TestMotorController");
		try {
			new TestMotorController();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}